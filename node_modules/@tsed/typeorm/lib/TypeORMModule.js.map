{"version":3,"file":"TypeORMModule.js","sourceRoot":"","sources":["../src/TypeORMModule.ts"],"names":[],"mappings":";;;AAAA,yCAAyF;AACzF,qCAA4F;AAC5F,8DAAyD;AAEzD,MAAa,aAAa;IAGxB,YAAY,aAA4B,EAAU,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAC9E,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAqC,SAAS,CAAC,IAAI,EAAE,CAAC;IACzF,CAAC;IAED,KAAK,CAAC,IAAI;QACR,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAExH,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC;IAChD,CAAC;CACF;AAhBD,sCAgBC;AAED,yBAAgB,CAAC;IACf,OAAO,EAAE,aAAa;IACtB,IAAI,EAAE,CAAC,sBAAa,EAAE,+BAAc,EAAE,wBAAe,CAAC;IACtD,SAAS,EAAE;QACT;YACE,IAAI,EAAE,CAAC,aAAa,CAAC;YACrB,GAAG,CAAC,IAAI,EAAE,OAAY;gBACpB,IAAI;oBACF,OAAO,6BAAmB,CAAC,IAAI,EAAE,OAAO,CAAC,UAAU,IAAI,SAAS,CAAC,CAAC;iBACnE;gBAAC,OAAO,EAAE,EAAE,GAAE;YACjB,CAAC;SACF;KACF;IACD,UAAU,EAAE,KAAK;IACjB,KAAK,CAAC,eAAe,CAAC,aAA4B,EAAE,cAA8B,EAAE,QAAyB;QAC3G,sBAAY,CACV;YACE,GAAG,CAAI,IAAsB;gBAC3B,OAAO,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAI,IAAW,CAAE,CAAC,CAAC,CAAC,SAAU,CAAC;YACjF,CAAC;SACF,EACD,EAAC,QAAQ,EAAE,IAAI,EAAC,CACjB,CAAC;QAEF,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;QACvE,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC;QAE3B,OAAO,aAAa,CAAC;IACvB,CAAC;CACF,CAAC,CAAC","sourcesContent":["import {Configuration, InjectorService, OnDestroy, registerProvider} from \"@tsed/common\";\nimport {ConnectionOptions, ContainedType, getCustomRepository, useContainer} from \"typeorm\";\nimport {TypeORMService} from \"./services/TypeORMService\";\n\nexport class TypeORMModule implements OnDestroy {\n  private settings: {[key: string]: ConnectionOptions};\n\n  constructor(configuration: Configuration, private typeORMService: TypeORMService) {\n    this.settings = configuration.get<{[key: string]: ConnectionOptions}>(\"typeorm\") || {};\n  }\n\n  async init(): Promise<any> {\n    const promises = Object.keys(this.settings).map((key) => this.typeORMService.createConnection(key, this.settings[key]));\n\n    return Promise.all(promises);\n  }\n\n  $onDestroy(): Promise<any> | void {\n    return this.typeORMService.closeConnections();\n  }\n}\n\nregisterProvider({\n  provide: TypeORMModule,\n  deps: [Configuration, TypeORMService, InjectorService],\n  resolvers: [\n    {\n      deps: [TypeORMModule],\n      get(type, options: any) {\n        try {\n          return getCustomRepository(type, options.connection || \"default\");\n        } catch (er) {}\n      }\n    }\n  ],\n  injectable: false,\n  async useAsyncFactory(configuration: Configuration, typeORMService: TypeORMService, injector: InjectorService) {\n    useContainer(\n      {\n        get<T>(type: ContainedType<T>): T {\n          return injector.hasProvider(type) ? injector.get<T>(type as any)! : undefined!;\n        }\n      },\n      {fallback: true}\n    );\n\n    const typeORMModule = new TypeORMModule(configuration, typeORMService);\n    await typeORMModule.init();\n\n    return typeORMModule;\n  }\n});\n"]}