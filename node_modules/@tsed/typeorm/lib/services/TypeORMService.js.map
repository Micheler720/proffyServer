{"version":3,"file":"TypeORMService.js","sourceRoot":"","sources":["../../src/services/TypeORMService.ts"],"names":[],"mappings":";;;;AAAA,yCAA8D;AAC9D,qCAA+F;AAC/F,gEAA2D;AAG3D,IAAa,cAAc,GAA3B,MAAa,cAAc;IAA3B;QACE;;;;WAIG;QACM,sBAAiB,GAAsB,8BAAoB,EAAE,CAAC;IAoEzE,CAAC;IAhEC;;;;OAIG;IACH,uBAAuB;IACvB,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,gBAAgB,CAAC,KAAa,SAAS,EAAE,QAA2B;QACxE,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,IAAI,EAAE,CAAC;QAEhC,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACxB,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACtB;QAED,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,+CAA+C,GAAG,EAAE,CAAC,CAAC;QAChF,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAEnE,IAAI;YACF,MAAM,UAAU,GAAG,MAAM,mCAAgB,CAAC,EAAC,GAAG,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAC,CAAC,CAAC;YAEpE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,GAAG,EAAE,CAAC,CAAC;YAExE,OAAO,UAAU,CAAC;SACnB;QAAC,OAAO,GAAG,EAAE;YACZ,0BAA0B;YAC1B,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnB,0BAA0B;YAC1B,OAAO,CAAC,IAAI,EAAE,CAAC;SAChB;IACH,CAAC;IAED;;;OAGG;IACH,GAAG,CAAC,KAAa,SAAS;QACxB,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,KAAa,SAAS;QACxB,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC;IAED,gBAAgB;QACd,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;YACnE,IAAI,QAAQ,CAAC,WAAW,EAAE;gBACxB,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC;aACzB;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC/B,CAAC;CACF,CAAA;AAlEC;IADC,eAAM,CAAC,wBAAe,CAAC;sCACN,wBAAe;gDAAC;AARvB,cAAc;IAD1B,gBAAO,EAAE;GACG,cAAc,CA0E1B;AA1EY,wCAAc","sourcesContent":["import {Inject, InjectorService, Service} from \"@tsed/common\";\nimport {Connection, ConnectionManager, ConnectionOptions, getConnectionManager} from \"typeorm\";\nimport {createConnection} from \"../utils/createConnection\";\n\n@Service()\nexport class TypeORMService {\n  /**\n   *\n   * @type {\"typeorm\".ConnectionManager}\n   * @private\n   */\n  readonly connectionManager: ConnectionManager = getConnectionManager();\n  @Inject(InjectorService)\n  private injector: InjectorService;\n\n  /**\n   *\n   * @type {Map<any, any>}\n   * @deprecated\n   */\n  // istanbul ignore next\n  get instances() {\n    return this.connectionManager;\n  }\n\n  /**\n   *\n   * @returns {Promise<\"typeorm\".Connection>}\n   */\n  async createConnection(id: string = \"default\", settings: ConnectionOptions): Promise<any> {\n    const key = settings.name || id;\n\n    if (key && this.has(key)) {\n      return this.get(key);\n    }\n\n    this.injector.logger.info(`Create connection with typeorm to database: ${key}`);\n    this.injector.logger.debug(`options: ${JSON.stringify(settings)}`);\n\n    try {\n      const connection = await createConnection({...settings, name: key});\n\n      this.injector.logger.info(`Connected with typeorm to database: ${key}`);\n\n      return connection;\n    } catch (err) {\n      /* istanbul ignore next */\n      console.error(err);\n      /* istanbul ignore next */\n      process.exit();\n    }\n  }\n\n  /**\n   *\n   * @returns {\"typeorm\".Connection}\n   */\n  get(id: string = \"default\"): Connection {\n    return this.connectionManager.get(id);\n  }\n\n  /**\n   *\n   * @param {string} id\n   * @returns {boolean}\n   */\n  has(id: string = \"default\"): boolean {\n    return this.connectionManager.has(id);\n  }\n\n  closeConnections(): Promise<any> {\n    const promises = this.connectionManager.connections.map((instance) => {\n      if (instance.isConnected) {\n        return instance.close();\n      }\n    });\n\n    return Promise.all(promises);\n  }\n}\n"]}